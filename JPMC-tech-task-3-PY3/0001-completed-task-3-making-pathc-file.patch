From 1162d73b4d60770a2ffdde1a58a8a17431a0a006 Mon Sep 17 00:00:00 2001
From: Nikhil <nikhilpatel.indore@gmail.com>
Date: Fri, 8 May 2020 19:50:16 +0530
Subject: [PATCH] completed task 3, making pathc file

---
 package.json           |  6 +++---
 src/DataManipulator.ts | 34 ++++++++++++++++++++++++----------
 src/Graph.tsx          | 27 ++++++++++++++++-----------
 3 files changed, 43 insertions(+), 24 deletions(-)

diff --git a/package.json b/package.json
index d2798ba..c51abd3 100644
--- a/package.json
+++ b/package.json
@@ -3,9 +3,9 @@
   "version": "0.1.0",
   "private": true,
   "dependencies": {
-    "@jpmorganchase/perspective": "^0.2.12",
-    "@jpmorganchase/perspective-viewer": "^0.2.12",
-    "@jpmorganchase/perspective-viewer-highcharts": "^0.2.12",
+    "@finos/perspective": "^0.4.8",
+    "@finos/perspective-viewer": "^0.4.8",
+    "@finos/perspective-viewer-highcharts": "^0.4.8",
     "@types/jest": "^23.3.13",
     "@types/node": "^10.12.19",
     "@types/react": "^16.9.0",
diff --git a/src/DataManipulator.ts b/src/DataManipulator.ts
index f6b15ff..b4d43fc 100644
--- a/src/DataManipulator.ts
+++ b/src/DataManipulator.ts
@@ -1,20 +1,34 @@
 import { ServerRespond } from './DataStreamer';
 
 export interface Row {
-  stock: string,
-  top_ask_price: number,
+  price_abc: number,
+  price_def: number,
+  ratio: number,
   timestamp: Date,
+  upper_bound: number,
+  lower_bound: number,
+  trigger_alert: number | undefined
 }
 
 
 export class DataManipulator {
-  static generateRow(serverResponds: ServerRespond[]): Row[] {
-    return serverResponds.map((el: any) => {
-      return {
-        stock: el.stock,
-        top_ask_price: el.top_ask && el.top_ask.price || 0,
-        timestamp: el.timestamp,
-      };
-    })
+  static generateRow(serverRespond: ServerRespond[]): Row {
+    const priceABC = (serverRespond[0].top_ask.price + serverRespond[0].top_bid.price)/2
+    const priceDEF = (serverRespond[1].top_ask.price + serverRespond[1].top_bid.price)/2
+    const ratio = priceABC/priceDEF
+    const upperBound = 1 + 0.05
+    const lowerBound = 1 - 0.05
+    const timestamp = serverRespond[0].timestamp > serverRespond[1].timestamp ? serverRespond[0].timestamp : serverRespond[1].timestamp
+    return {
+      price_abc : priceABC,
+      price_def: priceDEF,
+      ratio : ratio,
+      timestamp: timestamp,
+      upper_bound : upperBound,
+      lower_bound : lowerBound,
+      trigger_alert : (ratio > upperBound || ratio < lowerBound) ? ratio : undefined
+
+    }
+
   }
 }
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 58fb997..f780cf4 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -1,5 +1,5 @@
 import React, { Component } from 'react';
-import { Table } from '@jpmorganchase/perspective';
+import { Table } from '@finos/perspective';
 import { ServerRespond } from './DataStreamer';
 import { DataManipulator } from './DataManipulator';
 import './Graph.css';
@@ -23,10 +23,13 @@ class Graph extends Component<IProps, {}> {
     const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
-      stock: 'string',
-      top_ask_price: 'float',
-      top_bid_price: 'float',
+      price_abc: 'float',
+      price_def: 'float',
+      ratio: 'float',
       timestamp: 'date',
+      upper_bound: 'float',
+      lower_bound: 'float',
+      trigger_alert: 'float'
     };
 
     if (window.perspective && window.perspective.worker()) {
@@ -36,23 +39,25 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
       elem.load(this.table);
       elem.setAttribute('view', 'y_line');
-      elem.setAttribute('column-pivots', '["stock"]');
       elem.setAttribute('row-pivots', '["timestamp"]');
-      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('columns', '["ratio", "lower_bound", "upper_bound", "trigger_alert"]');
       elem.setAttribute('aggregates', JSON.stringify({
-        stock: 'distinctcount',
-        top_ask_price: 'avg',
-        top_bid_price: 'avg',
+        price_abc: 'avg',
+        price_def: 'avg',
+        ratio: 'avg',
         timestamp: 'distinct count',
+        upper_bound: 'avg',
+        lower_bound: 'avg',
+        trigger_alert: 'avg',
       }));
     }
   }
 
   componentDidUpdate() {
     if (this.table) {
-      this.table.update(
+      this.table.update([
         DataManipulator.generateRow(this.props.data),
-      );
+      ]);
     }
   }
 }
-- 
2.17.1

